## Searching a static set

> You are asked to implement a searchable set of $n$ elements in which the keys
> are numbers. The set is static (no `INSERT` or `DELETE` operations), and the
> only operation required is `SEARCH`. You are given an arbitrary amount of time
> to preprocess the $n$ elements so that `SEARCH` operations run quickly.
>
> 1. Show how to implement `SEARCH` in $\O(\lg n)$ worst-case time using no
>    extra storage beyond what is needed to store the elements of the set
>    themselves.
>
> 2. Consider implementing the set by open-address hashing on $m$ slots, and
>    assume independent uniform permutation hashing. What is the minimum amount
>    of extra storage $m - n$ required to make the average performance of an
>    unsuccessful `SEARCH` operation be at least as good as the bound in part
>    (a)? Your answer should be an asymptotic bound on $m - n$ in terms of $n$.

Given that the keys are comparable (being numbers), we can implement this by
sorting the numbers and then just doing a binary search.

Instead of solving the second part, I'm just going to mention that the third
edition talks about perfect hashing, which solves this problem "nicely".
