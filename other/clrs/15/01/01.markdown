> Give a dynamic-programming algorithm for the activity-selection problem, based
> on recurrence (15.2). Have your algorithm compute the sizes $c[i, j]$ as
> defined above and also produce the maximum-size subset of mutually compatible
> activities. Assume that the inputs have been sorted as in equation (15.1).
> Compare the running time of your solution to the running time of
> `GREEDY-ACTIVITY-SELECTOR`.

The algorithm, interestingly enough, is $\Theta(n^3)$, which is much slower.
