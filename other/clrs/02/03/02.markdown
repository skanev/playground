> The test in line 1 of the `MERGE-SORT` procedure reads `if p >= r` rather than
> `if p != r`. If `MERGE-SORT` is called with `p > r`, then the subarray
> `A[p:r]` is empty. Argue that as long as the initial call to `MERGE-SORT(A, 1,
> n)` has $n \ge 1$, the test `if pr != r` suffices to ensure that no recursive
> call has $p > r$.

That's almost like a look invariant! Also, the solution is essentially expressed
in the problem statement.

On each call we can assume that $p \le r$. Two recursive calls are made, and
essentially, we're asked to prove that:

* $p \le \lfloor (p + r) / 2 \rfloor $
* $ \lfloor (p + r) / 2 \rfloor + 1 \le r $

The first is obvious, the second less so.

If we made the recursive call, we know that $p < r$, that is $p <= r - 1$. If we
plug it in, we get:

$$
  \lfloor (p + r) / 2 \rfloor + 1
    \le \lfloor (2r - 1) / 2 \rfloor + 1
    = \lfloor r - 1/2 \rfloor + 1
    = r - 1 + 1
    = r
$$

That's because, if you think about it, $\lfloor (2n - 1)/2 \rfloor$ is always $n
- 1$.
