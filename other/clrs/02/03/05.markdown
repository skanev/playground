> You can also think of insertion sort as a recursive algorithm. In order to
> sort $A[1:n]$, recursively sort the subarray $A[1:n-1]$ and then insert $A[i]$
> into the sorted subarray $A[1:n-1]$. Write pseudocode for this recursive
> version of insertion sort. Give a recurrence for its worst-case running time.

The pseudocode is something like this:

    INSERTION-SORT(A, n)
      if n == 1
        return

      INSERTION-SORT(A, n - 1)

      key = A[n]
      i = n
      while i > 0 and key <= A[i]
        A[i] = A[i - 1]
        i = i - 1

      A[i] = key

The recurrence is

$$ T(n) =
   \begin{cases}
     \Theta(1) & \text{if } n = 1, \\\\
     T(n-1) + C(n-1) & \text{otherwise}.
   \end{cases} $$

where $C(n)$ is the time to insert an element in a sorted array of $n$
elements.
