> Given an element $x$ in an $n$-node order-statistic tree and a natural number
> $i$, how can we determine the $i$th successor of $x$ in the linear order of
> the tree in $\O(\lg n)$ time?

Here's the code:

```python
def nth_successor(node, i):
    while i > node.right.size:
        if node.parent.left is node:
            i -= 1 + node.right.size
            node = node.parent
        else:
            i += 1 + node.left.size
            node = node.parent

    if i == 0:
        return node

    return node.right.select(i)
```

The code first determines whether the successor is in the right subtree, or
whether it's somewhere along the parents. It navigates the tree up until it
identifies a node, which contains the $i$-th successor in its right subtree,
while updating $i$. Once it identifies one, it uses `SELECT` to find the node
with the specific rank.

The time is $\O(\lg n)$, because the height of the three is $\O(\lg n)$, and the
algorithm traverses that length at most twice â€“ once on the way up, and then
once for `SELECT`.
