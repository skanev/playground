## Solving recurrences with a change of variables

> Sometimes, a little algebraic manipulation can make an unknown recurrence
> similar to one you have seen before. Let's solve the recurrence:
>
> $$ T(n) = 2T(\sqrt n) + \Theta(\lg n) \tag{4.25} $$
>
> by using the change-of-variables method.
>
> 1. Define $m = \lg n$ and $S(m) = T(2^m)$. Rewrite recurrence (4.25) in terms
>    of $m$ and $S(m)$.
> 2. Solve your recurrence for $S(m)$.
> 3. Use your solution for $S(m)$ to conclude that $T(n) = \Theta(\lg n \lg\lg
>    n)$
> 4. Sketch the recursion tree for recurrence (4.25), and use it to explain
>    intuitively why the solution is $T(n) = \Theta(\lg n \lg\lg n)$.
>
> Solve the following recurrences by changing variables:
>
> 5. $T(n) = 2T(\sqrt n) + \Theta(1)$
> 6. $T(n) = 3T(\sqrt[3] n) + \Theta(n)$

### The first part

The new recurrence is going to be:

$$ S(m) = T(2^m) = 2T(\sqrt{2^m}) + \Theta(\lg 2^m) = 2T(2^{m/2}) + \Theta(m) = 2S(m/2) + \Theta(m) $$

Or simply:

$$ S(m) = 2S(m/2) + \Theta(m) $$

This is the canonical $m \lg m$ complexity, and when we expand $m$ again we get
$\Theta(\lg n \lg\lg n)$. I guess we should include the fact that $\lg n$ meets
the polynomial-growth condition, so $f(\Theta(n)) = \Theta(f(n))$.

When we draw the recursion tree, we see that at each level we reduce the size of
the input by a square root. I'd struggle to formulate it nicely, but check out
this [Stack Overflow answer][answer] for some better phrasing.

[answer]: https://stackoverflow.com/questions/16472012/what-would-cause-an-algorithm-to-have-olog-log-n-complexity

### e. $T(n) = 2T(\sqrt n) + \Theta(1)$

Applying the same method, we get:

$$ S(m) = 2S(m/2) + \Theta(1) $$

This will be $\Theta(m) = \Theta(\lg n)$.

### f. $T(n) = 3T(\sqrt[3] n) + \Theta(n)$

This time it is:

$$ S(m) = 3S(m/3) + \Theta(2^m) $$

This is $\Theta(2^m) = \Theta(2^{\lg n}) = \Theta(n)$.
