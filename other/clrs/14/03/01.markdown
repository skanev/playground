> Which is a more efficient way to determine the optimal number of
> multiplications in a matrix-chain multiplication problem: enumerating all the
> ways of parenthesizing the product and computing the number of multiplications
> for each, or running `RECURSIVE-MATRIX-CHAIN`? Justify your answer.

Obviously the dynamic programming approach.

To keep it simple, if there is a split on $k$, the dynamic programming approach
would calculate the possible parenthesizations of $A_k A_{k+1} \ldots A_j$ only
once, while when enumerating, we'll calculate them once for each possible
parenthesization of $A_i A_{i + 1} \ldots A_{k - 1}$.

In fact, I fail to see how the original slow algorithm is not doing just that â€“
enumerating all the ways in which the multiplication can be parenthesized.
