> What is the running time of `HEAPSORT` on an array $A$ of length $n$ that is
> already sorted in increasing order? What about decreasing order?

Both of them are $\Theta(n\lg{n})$.

If the array is sorted in increasing order, the algorithm will need to convert
it to a heap that will take $\O(n)$. Afterwards, however, there are $n-1$ calls
to `MAX-HEAPIFY` and each one will perform the full $\lg{k}$ operations. Since:

$$ \sum_{i=1}^{n-1}\lg{k} = \lg\Big((n-1)!\Big) = \Theta(n\lg{n}) $$

For decreasing order. `BUILD-MAX-HEAP` will be faster (by a constant
factor), but `HEAPSORT` will only take $\Theta(n)$ because each call to
`MAX-HEAPIFY` takes $\Theta(1)$ time since the array is already sorted in
descending order. Thus if the array is sorted in decreasing order then
`HEAPSORT` should take $\Theta(1)$.
