## Young tableaus

> An $m \times n$ **Young tableau** is an $m \times n$ matrix such that the
> entries of each row are in sorted order from left to right and the entries of
> each column are in sorted order from top to bottom. Some of the entries of a
> Young tableau may be $\infty$, which we treat as nonexistent elements. Thus,
> a Young tableau can be used to hold $r \le mn$ finite numbers.
>
> 1. Draw $4 \times 4$ tableau containing the elements $\\{9, 16, 3, 2, 4, 8,
>    5, 14, 12\\}$
> 2. Argue that an $m \times n$ Young tableau $Y$ is empty if $Y[1, 1] =
>    \infty$. Argue that $Y$ is full (contains $mn$ elements) if $Y[m, n] <
>    \infty$.
> 3. Give an algorithm to implement `EXTRACT-MIN` on a nonempty $m \times n$
>    Young tableau that runs in $\O(m + n)$ time. Your algorithm should use a
>    recursive subroutine that solves an $m \times n$ problem by recursively
>    solving either an $(m - 1) \times n$ or an $m \times (n - 1)$ subproblem.
>    (Hint: Think about `MAX-HEAPIFY`.) Explain why your implementation of
>    `EXTRACT-MIN` runs in $\O(m + n)$ time.
> 4. Show how to insert a new element into a nonfull $m \times n$ Young tableau
>    in $\O(m + n)$ time
> 5. Using no other sorting method as a subroutine, show how to use an $n
>    \times n$ Young tableau to sort $n^2$ numbers in $\O(n^3)$ time.
> 6. Give an $\O(m + n)$-time algorithm to determine whether a given number is
>    stored in a given $m \times n$ Young tableau.

### Draw a tableau

$$ \begin{matrix}
        2 &      3 &     12 &     14 \\\\
        4 &      8 &     16 & \infty \\\\
        5 &      9 & \infty & \infty \\\\
   \infty & \infty & \infty & \infty \\\\
   \end{matrix} $$

### Empty and full

If the top left element is $\infty$, then all the elements on the first row
need to be $\infty$. But if this is the case, all other elements need to be
$\infty$ because they are larger than the first element on their column.

If the bottom right element is smaller than $\infty$, all the elements on the
bottom row need to be smaller than $\infty$. But so are the other elements in
the tableau, because each is smaller than the bottom element of its column.

### Extracting a minimum element

The $A[1, 1]$ is the smallest elemnt. We store it, so we can return it later
and then replace is with $\infty$. This breaks the Young tableau property and
we need to perform a procedure, similar to `MAX-HEAPIFY` to restore it.

We compare $A[i, j]$ with each of its neighbours and exchange it with the
smallest. This restores the property for $A[i, j]$ but reduces the problem to
either $A[i, j+1]$ or $A[i+1, j]$. We terminate when $A[i,j]$ is smaller than
its neighbours.

The relation in question is:

$$ T(p) = T(p - 1) + \O(1) = T(p-2) + \O(1) + \O(1) = \ldots = \O(p) $$

### Inserting a new element

The algorithm is very similar to the previous, except that we start with the
bottom right element of the tableau and move it upwards and leftwards to the
correct position. The asymptotic analysis is the same.

### Sorting

We can sort by starting with an empty tableau and inserting all the $n^2$
elements in it. Each insertion is $\O(n + n) = \O(n)$. The complexity is
$n^2\O(n) = \O(n^3)$. Afterwards we can take them one by one and put them back
in the original array which has the same complexity. In total, its $\O(n^3)$.

We can also do it in place if we allow for "partial" tableaus where only a
portion of the top rows (and a portion of the last of them) is in the tableau.
Then we can build the tableau in place and then start putting each minimal
element to the end. This would be asymptotically equal, but use constant
memory. It would also sort the array in reverse.

### Finding

We from the lower-left corner. We check the current element $current$ with the
one we're looking for $key$ and move up if $current > key$ and right if
$current < key$. We declare success if $current = key$ and otherwise terminate
if we walk off the tableau.
