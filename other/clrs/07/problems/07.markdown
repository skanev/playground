## Fuzzy sorting of intervals

> Consider a sorting problem in which you do not know the numbers exactly.
> Instead, for each number, you know an interval on the real line to which it
> belongs. That is, you are given $n$ closed intervals of the form $[a_i, b_i]$,
> where $a_i \le b_i$. The goal is to **fuzzy-sort** these intervals, i.e., to
> produce a permutation $\langle i_1, i_2, \ldots, i_n \rangle$ of the intervals
> such that for $j = 1, 2, \ldots, n$, there exists $c_j \in [a_{i_j}, b_{i_j}]$
> satisfying $c_1 \le c_2 \le \cdots \le c_n$.
>
> 1. Design a randomized algorithm for fuzzy-sorting $n$ intervals. Your
>    algorithm should have the general structure of an algorithm that
>    quicksorts the left endpoints (the $a_i$ values), but it should take
>    advantage of overlapping intervals to improve the running time. (As the
>    intervals overlap more and more, the problem of fuzzy-sorting the
>    intervals becomes progressively easier. Your algorithm should take
>    advantage of such overlapping, to the extend that it exists).
> 2. Argue that your algorithm runs in $\Theta(n\lg{n})$ expected time in
>    general, but runs in $\Theta(n)$ expected time when all of the intervals
>    overlap (i.e., when there exists a value $x$ such that $x \in [a_i, b_i]$
>    for all $i$). Your algorithm should not be checking for this case
>    explicitly; rather, its performance should naturally improve as the amount
>    of overlap increases.

### The algorithm

The approach is very similar to problem 7.2. After we (randomly) choose a pivot
interval, we check if it intersects with the other intervals. More precisely,
we accumulate an intersection of the pivot and the other intervals. Afterwards
we use this interval for comparison instead of the pivot.

When comparing, we can treat intervals containing the intersection as equal to
each other. Thus after we have arranged all the smaller intervals on the left
of the pivot, we can put all the equal ones immediatelly to the right of the
pivot. Like in problem 7.2, we return two points (an interval) to use as a for
recursive calls.

Even if partition does (worst-case) three passes over the array, it is still
linear.

### Expected time

If we assume that no two intervals have intersections, the analysis is
identical to quicksort. If, however, all the intervals share a common point,
the partitioning function would solve it in one go.
